x.dat <- read.csv("IngresoPoblacion_py.csv")
x.dat <- read.table("Datos/IngresoPoblacion_py.cvs", header=T, row.names=1,
na.strings = "4/",)
## La separación decimal en R es . y no ,
x.dat <- read.csv("IngresoPoblacion_py.csv")
## La separación decimal en R es . y no ,
x.dat <- read.csv("Datos/IngresoPoblacion_py.csv")
## La separación decimal en R es . y no ,
x.dat <- read.csv("Datos/IngresoPoblacion_py.csv")
x.dat <- read.table("Datos/IngresoPoblacion_py.csv", header=T, row.names=1,
na.strings = "4/",)
View(x.dat)
x.dat <- read.table("Datos/IngresoPoblacion_py.csv", header=T, row.names=1,
na.strings = "4/",sep= ";")
View(x.dat)
##Analizar Datos
head(Ingreso)
## La separación decimal en R es . y no ,
Ingreso <- read.csv("Datos/IngresoPoblacion_py.csv")
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T, row.names=1,
na.strings = "4/",sep= ";")
##Analizar Datos
head(Ingreso)
summary(Ingreso$X2017)
dim(Ingreso)
names(Ingreso)
summary(Ingreso) #Sumario de Datos
View(Ingreso)
#Departamento con mayor ingreso?
# Reshape data to long format
long_data <- Ingreso %>%
gather(key = "year", value = "amount", -location) %>%
mutate(year = as.integer(year))
library(tidyverse)
library(dplyr)
install.packages(tidyverse
_
# Paquetes
install.packages("tidyverse", dependencies=T)
install.packages("dplyr", dependencies=T)
library(tidyverse)
library(dplyr)
#Departamento con mayor ingreso?
# Reshape data to long format
long_data <- Ingreso %>%
gather(key = "year", value = "amount", -location) %>%
mutate(year = as.integer(year))
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
## La separación decimal en R es . y no ,
Ingreso <- read.csv("Datos/IngresoPoblacion_py.csv")
## La separación decimal en R es . y no ,
Ingreso <- read.csv("Datos/IngresoPoblacion_py.csv")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
##Revisar Datos
head(Ingreso) #Primeros datos
summary(Ingreso) #Sumario de Datos
View(Ingreso)
## La separación decimal en R es . y no ,
Ingreso <- read.csv("Datos/IngresoPromPoblacion_py.csv")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";")
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";",row.names = NULL)
View(Ingreso)
View(Ingreso)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";",row.names = NULL, check.names = FALSE)
View(Ingreso)
##Revisar Datos
head(Ingreso) #Primeros datos
#Departamento con mayor ingreso?
#Reshape data to long format
dato_largo <- Ingreso %>%
gather(key = "year", value = "amount", -location) %>%
mutate(year = as.integer(year))
#Departamento con mayor ingreso?
#Reshape data to long format
dato_largo <- Ingreso %>%
gather(key = "year", value = "amount", -Departamento) %>%
mutate(year = as.integer(year))
View(dato_largo)
#Departamento con mayor ingreso?
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
# Group by location and find the location with the greatest total amount
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = sum(Cantidad)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
View(result)
()
# Group by location and find the location with the greatest total amount
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
# Group by location and find the location with the greatest total amount
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad, na.rm = TRUE)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
View(result)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";", check.names = FALSE)
#Departamento con mayor ingreso?
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
# Group by location and find the location with the greatest total amount
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad, na.rm = TRUE)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
View(result)
#Departamento con mayor ingreso?
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
## La separación decimal en R es . y no ,
Ingreso <- read.csv("Datos/IngresoPromPoblacion_py.csv")
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";", check.names = FALSE)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/",sep= ";", check.names = FALSE)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/", sep= ";", check.names = FALSE)
Ingreso <- read.table("Datos/IngresoPromPoblacion_py.csv", header=T,
na.strings = "4/", sep= ";", check.names = FALSE)
View(Ingreso)
#Departamento con mayor ingreso?
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
# Group by location and find the location with the greatest total amount
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad, na.rm = TRUE)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
View(result)
# Agrupar los datos por departamento y encontrar el departamento con el mayor ingreso promedio
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad, na.rm = TRUE))
View(result)
# Agrupar los datos por departamento y encontrar el departamento con el mayor ingreso promedio
result <- dato_largo %>%
group_by(Departamento) %>%
summarize(Cantidad_total = mean(Cantidad, na.rm = TRUE)) %>%
slice(which.max(Cantidad_total)) %>%
ungroup()
View(dato_largo)
x <- 1:3
names(x)
names(x) <- c("a", "b", "c") #Agreagar
names(x)
## Factor
x <- factor(c("alpha", "beta", "gamma", "alpha", "beta"))
levels(x)
levels(x)[levels(x)=="beta"] <- "dos"
levels(x)[3] <- "tres"
levels(x) <- c("uno", "dos", "tres")
## Matriz
X <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
View(X)
rownames(X)
colnames(X)
nrow(X)
ncol(X)
dim(X)
t(X)
?t
C.4 <- c(100, 1000)
X1 <- cbind(X, C.4)
fila3 <- c(10, 100, 1000)
X2 <- rbind(X, fila3)
## Marco de datos
d <- data.frame(alpha=1:3, beta=4:6, gamma=7:9)
## Marco de datos
d <- data.frame(alpha=1:3, beta=4:6, gamma=7:9)
View(d)
## Lista (grupos de cualquier tipo de objeto R)
lista.A <- list(data=data, otro.data=d, X, c(1, 2, 3, 4))
# Convertir objetos
as.numeric()
data.mat <- as.matrix(data)
# Indexación
data$id
# Reordenar marco de datos
data <- data.frame(id=1:3, peso=c(20, 27, 24), tamaño=c("pequeño", "grande", "mediano"))
data[c(1, 3, 2)]
data[c("tamaño", "id", "peso")]
## Lista (grupos de cualquier tipo de objeto R)
lista.A <- list(data=data, otro.data=d, X, c(1, 2, 3, 4))
# Convertir objetos
as.numeric()
data.mat <- as.matrix(data)
# Indexación
data$id
data[3]
data[c(1, 2)]
data[1,]
data[,1]
data[1,2]
intake.pre <- c(5260, 5470, 5640, 6180, 6390, 6515, 6805, 7515, 7515, 8230, 8770)
intake.post <- c(3910, 4220, 3885, 5160, 5645, 4680, 5265, 5975, 6790, 6900, 7335)
intake.post[intake.pre > 7000]
intake.pre > 7000
View(Ingreso)
Itapua <- Ingreso$Departamento[Itapua]
Itapua <- Ingreso$Departamento[itapua]
Itapua <- Ingreso$Departamento[Itapua]
Itapua <- Ingreso$Departamento[itapua]
head(Ingreso)
Itapua <- Ingreso$'itapua'
Itapua <- Ingreso$'AltoParana'
Itapua <- Ingreso$'Alto Parana'
Itapua <- Ingreso$`Alto Parana`
Itapua <- dato_largo$Departamento
Itapua <- dato_largo$Departamento=="Alto Parana"
Itapua <- dato_largo[Departamento == 'Itapua']
dato_largo[Departamento == 'Itapua']
dato_largo[year == 'cantidad']
dato_largo[year == '2000']
dato_largo[year == '2001']
Itapua <- dato_largo$Departamento=="Alto Parana"
Itapua <- dato_largo$Departamento=="Itapua"
# Supongamos que tu DataFrame se llama dato_largo
dato_largo_itapua <- dato_largo[dato_largo$Departamento == "Itapua", ]
View(dato_largo_itapua)
intake.post[intake.pre > 7000]
intake.post[intake.pre > 7000]
intake.pre[intake.pre > 7000]
#Seleccionar Solo datos de Itapua
dato_largo_itapua <- dato_largo[dato_largo$Departamento == "Itapua", ]
View(dato_largo_itapua)
Ingreso_Promedio_itapua <-  dato_largo_itapua$Cantidad
#Seleccionar Solo datos de Itapua
dato_largo_Boqueron <- dato_largo[dato_largo$Departamento == "Boqueron", ]
Ingreso_Promedio_Boqueron <-  dato_largo_Boqueron$Cantidad
Ingreso_Promedio_Boqueron
intake.pre > 7000
#Creamos dos Vectores
?iris
#Creamos dos Vectores
library(iris)
#Creamos dos Vectores
iris
#Creamos dos Vectores
iris$Sepal.Length
#Creamos dos Vectores
Sepalos <- iris$Sepal.Length
Especie <- iris$Species
#Selleccionar Valores mayores a 7000
Sepalos[Sepalos > 3]
#Selleccionar Valores mayores a 7000
Sepalos[Sepalos > 5]
#Selleccionar Valores mayores a 7000
Sepalos[Sepalos > 6]
Sepalos > 6
Pelos_largo <- iris$Petal.Length
#Selleccionar Valores mayores a 7000
Petalos_largo[Petalos_largo > 2]
Pelos_largo <- iris$Petal.Length
#Selleccionar Valores mayores a 7000
Petalos_largo[Petalos_largo > 2]
Petalos_largo <- iris$Petal.Length
#Selleccionar Valores mayores a 7000
Petalos_largo[Petalos_largo > 2]
#Selleccionar Valores mayores a 7000
Petalos_largo[Petalos_largo > 5]
intake.post[Sepalos_largo > 6 & Petalos_largo > 5]
Sepalos_largo[Sepalos_largo > 6]
#Creamos dos Vectores
Sepalos_largo <- iris$Sepal.Length
Petalos_largo <- iris$Petal.Length
#Selleccionar Valores mayores a 7000
Sepalos_largo > 6
Sepalos_largo[Sepalos_largo > 6]
Petalos_largo[Petalos_largo > 5]
Petalos_largo[Sepalos_largo > 6 & Petalos_largo > 5]
Petalos_largo[Sepalos_largo > 6 & Petalos_largo > 5]
Petalos_largo[Sepalos_largo > 6 & Petalos_largo > 6]
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_amambay <- Ingresos$Departamento == "Amambay"
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_amambay <- Ingreso$Departamento == "Amambay"
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_amambay <- Ingreso$Departamento == "Amambay"
condicion_alto_parana <- Ingreso$Departamento == "Alto Parana"
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_amambay <- Ingreso[condicion_amambay, c("1998", "1999", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008")]
View(ganancia_amambay)
# Seleccionar filas que cumplen con la condición para Alto Parana
ganancia_alto_parana <- Ingreso[condicion_alto_parana, c("1998", "1999", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008")]
View(ganancia_alto_parana)
condicion_Alto_parana <- Ingreso$Departamento == "San Pedro"
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_Itapua <- Ingreso$Departamento == "Alto Parana"
condicion_Alto_parana <- Ingreso$Departamento == "Itapua"
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_Alto_parana <- Ingreso$Departamento == "Alto Parana"
condicion_Itapua <- Ingreso$Departamento == "Itapua"
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_SanPedro <- Ingreso[condicion_Alto_parana, c(2000:2018)]
# Supongamos que tu DataFrame se llama tu_data_frame
# Crear un vector lógico para seleccionar filas según la condición
condicion_Alto_parana <- dato_largo$Departamento == "Alto Parana"
condicion_Itapua <- dato_largo$Departamento == "Itapua"
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_SanPedro <- dato_largo[condicion_Alto_parana, c(2000:2018)]
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_Alto_parana <- dato_largo[condicion_Alto_parana, c(2000:2018)]
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_Alto_parana <- dato_largo[condicion_Alto_parana, c(2000:2018)]
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_Alto_parana <- dato_largo[condicion_Alto_parana, c("1998", "1999", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008")]
# Seleccionar filas que cumplen con la condición para Amambay
ganancia_Alto_parana <- dato_largo[condicion_Alto_parana, year]
View(dato_largo)
#Departamentos con ingresos mayor a 2.5
resultados <- dato_largo %>%
filter(Cantidad > 2.5) %>%
select(Departamento, Año)
#Departamentos con ingresos mayor a 2.5
resultados <- dato_largo %>%
filter(Cantidad > 2.5) %>%
select(Departamento, year)
View(resultados)
#Departamentos con ingresos mayor a 2.5
resultados <- dato_largo %>%
filter(Cantidad > 2.5) %>%
select(Departamento, Cantidad)
#Departamentos con ingresos mayor a 2.5
resultados <- dato_largo %>%
filter(Cantidad > 2.5) %>%
select(Departamento, year, Cantidad)
IrisS[3]
# Indexación
IrisS <- iris$Species
IrisS[3]
IrisS[c(1, 2)]
IrisS[1,]
data[,1]
data[1,2]
IrisS[1,2]
IrisS[1,]
IrisS[c(1, 2)]
IrisS[1,2]
iris[1,]
iris[3]
iris[c(1, 2)]
iris[1,]
iris[,1]
iris[1,2]
iris[1,3-]
iris[1,30]
iris[1,20]
iris[1,14]
iris[1,3]
iris[1,4]
iris[2,4]
iris[2,5]
iris[10,5]
iris[15,5]
iris[15,3]
iris[1,]
iris[,1]
iris[,4] #Datos en Columna 1
iris[15,3]
iris[c(1, 2)]
iris[c(1, 2),5]
iris[c(1, 2),3]
iris[c(1, 2)]
iris[3]
# Funciones
x <- 1:20
summary(x)
sum(x)
prod(x)
max(x)
min(x)
range(x)
mean(x)
median(x)
sd(x)
var(x)
log(x)
log10(x)
x[c(2, 3)] <- 1
x[3] <- 100
sort(x)
x[c(2, 3)] <- 1
x
x[c(2, 3)] <- 111 #Intro
x
xunique(x)
unique(x)
rev(sort(x))
which(x == 100)
x[3] <- 100 #introducir 100 en el lugar 3
which(x == 100)
levels(x)
?levels
## Factor
x <- factor(c("alpha", "beta", "gamma", "alpha", "beta"))
levels(x)
levels(x)[levels(x)=="beta"] <- "dos"
x
levels(x)[3] <- "tres"
x
levels(x) <- c("uno", "dos", "tres")
x
## Matriz
X <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
rownames(X)
colnames(X)
nrow(X)
ncol(X)
dim(X)
t(X) #trasponer
C.4 <- c(100, 1000)
X1 <- cbind(X, C.4)
View(X1)
View(X)
View(X1)
fila3 <- c(10, 100, 1000)
X2 <- rbind(X, fila3)
rep(1:3, 10)
# Gráficos
x <- 1:100 * rexp(100)
y <- seq(1, 50, length=100) * rnorm(100)
plot(x)
plot(y)
plot(y, type="p")
plot(y, type="l")
plot(y, type="b")
plot(y, xlim=c(40, 80), ylim=c(-20, 20))
plot(y, type="p")
plot(y, type="l")
plot(y, type="b")
plot(y, xlim=c(40, 80), ylim=c(-20, 20))
plot(y, main="Gráfico ficticio", xlab="Índice ordenado", ylab="Valor de")
melt(Ingreso, id.vars=c("year", "Departamento"))  # De formato ancho a largo
?melt
??melt
library(data.table)
melt(Ingreso, id.vars=c("year", "Departamento"))  # De formato ancho a largo
dato_largo$Departamento <- str_trim(dato_largo$Departamento)  # Recortar espacios en blanco
View(dato_largo)
dato_largo$Departamento <- str_trim(dato_largo$Departamento)  # Recortar espacios en blanco
dato_largo$Departamento <- str_replace(dato_largo$Departamento, ' ', '_')  # Reemplazar ciertos valores
View(dato_largo)
any(is.na(data))  # Verificar valores faltantes (NAs)
any(is.na(dato_largo))  # Verificar valores faltantes (NAs)
data[is.na(dato_largo)] <- 0  # Reemplazar NAs con 0s
dato_largo[is.na(dato_largo)] <- 0  # Reemplazar NAs con 0s
View(dato_largo)
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
plot(Sepalos_largo)
plot(Petalos_largo)
plot(Sepalos_largo, type="l")
plot(Sepalos_largo, type="b")
plot(Sepalos_largo~Petalos_largo, main="Gráfico ficticio", xlab="Índice ordenado", ylab="Valor de y")
plot(Petalos_largo)
plot(Sepalos_largo~Petalos_largo, main="Iris", xlab="Sepalos (cm)", ylab="Petalos (cm)")
