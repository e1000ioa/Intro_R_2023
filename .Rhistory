fila3 <- c(10, 100, 1000)
X2 <- rbind(X, fila3)
rep(1:3, 10)
# Gráficos
x <- 1:100 * rexp(100)
y <- seq(1, 50, length=100) * rnorm(100)
plot(x)
plot(y)
plot(y, type="p")
plot(y, type="l")
plot(y, type="b")
plot(y, xlim=c(40, 80), ylim=c(-20, 20))
plot(y, type="p")
plot(y, type="l")
plot(y, type="b")
plot(y, xlim=c(40, 80), ylim=c(-20, 20))
plot(y, main="Gráfico ficticio", xlab="Índice ordenado", ylab="Valor de")
melt(Ingreso, id.vars=c("year", "Departamento"))  # De formato ancho a largo
?melt
??melt
library(data.table)
melt(Ingreso, id.vars=c("year", "Departamento"))  # De formato ancho a largo
dato_largo$Departamento <- str_trim(dato_largo$Departamento)  # Recortar espacios en blanco
View(dato_largo)
dato_largo$Departamento <- str_trim(dato_largo$Departamento)  # Recortar espacios en blanco
dato_largo$Departamento <- str_replace(dato_largo$Departamento, ' ', '_')  # Reemplazar ciertos valores
View(dato_largo)
any(is.na(data))  # Verificar valores faltantes (NAs)
any(is.na(dato_largo))  # Verificar valores faltantes (NAs)
data[is.na(dato_largo)] <- 0  # Reemplazar NAs con 0s
dato_largo[is.na(dato_largo)] <- 0  # Reemplazar NAs con 0s
View(dato_largo)
#Cambiar a datos largos
dato_largo <- Ingreso %>%
gather(key = "year", value = "Cantidad", -Departamento) %>%
mutate(year = as.integer(year))
plot(Sepalos_largo)
plot(Petalos_largo)
plot(Sepalos_largo, type="l")
plot(Sepalos_largo, type="b")
plot(Sepalos_largo~Petalos_largo, main="Gráfico ficticio", xlab="Índice ordenado", ylab="Valor de y")
plot(Petalos_largo)
plot(Sepalos_largo~Petalos_largo, main="Iris", xlab="Sepalos (cm)", ylab="Petalos (cm)")
?norm
rnorm(50,10,4)
hist(rnorm(50,10,4))
plot(rnorm(50,10,4))
hist(rnorm(50,10,4))
hist(rnorm(50,10,5))
X1 <- cbind(X, C.4)
View(X1)
C.4 <- c(100, 1000) #agregar 4ta columna
View(X2)
#Donde se fue la Columna 4?
X3 <- rbind(X1, fila3) #agregar fila 3 a X
## Matriz
X <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
View(X)
C.4 <- c(100, 1000) #crear vector para 4ta columna
X1 <- cbind(X, C.4) #Agregar 4ta columna a X
View(X1)
fila3 <- c(10, 100, 1000) #crear fila 3
X2 <- rbind(X, fila3) #agregar fila 3 a X
View(X2)
#Donde se fue la Columna 4
fila3 <- c(10, 100, 1000, 10000) #crear fila 3
X3 <- rbind(X1, fila3) #agregar fila 3 a X
View(X3)
#Relevamiento de rindes,
rnorm(50,2.8,0.8) #n = observaciones, mean = media, sd = desviacion standart
hist(rnorm(50,2.8,0.8))
# Funciones (Agregar comentario a cada funcion)
x <- 1:20 #Creamos un Objeto
rev(x)
plot(cars)
###### Directorios de trabajo
setwd("/Users/lio/Documents/GitHub/Intro_R_2023")  #Mac
setwd("c:/docs/mydir/Session01")  # Windows
setwd("~/Documents/GitHub/Intro_R_2023")
install.packages("tidyverse")
install.packages("dplyr")
library(tidyverse)
library(dplyr)
update.packages() #actualiza todos los paquetes que tengas instalados
x <- c(8,9,10,12,14,10,13,10,9)
?print
## Lista (grupos de cualquier tipo de objeto R)
lista.A <- list(data=data, otro.data=d, X, c(1, 2, 3, 4))
View(lista.A)
numericos_vector <- c(1.5, 2.3, 4.0)
enteros_vector <- c(1L, 2L, 3L)
logicos_vector <- c(TRUE, FALSE, TRUE)
caracteres_vector <- c("uno", "dos", "tres")
## Lista (grupos de cualquier tipo de objeto R)
lista_ejemplo <- list(numeric_vector, enteros_vector, caracteres_vector)
numeric_vector <- c(1.5, 2.3, 4.0)
entero_vector <- c(1L, 2L, 3L)
logico_vector <- c(TRUE, FALSE, TRUE)
caracteres_vector <- c("uno", "dos", "tres")
?plot
#Departamentos con ingresos mayor a 2.5
resultados <- dato_largo %>%
filter(Cantidad > 2.5 & year > 2000) %>%
select(Departamento, year, Cantidad)
View(resultados)
plot(resultado)
plot(resultados)
plot(resultados$year~resultados$Cantidad)
plot(resultados$Cantidad~resultados$year)
?legend
tinytex::reinstall_tinytex(repository = "illinois").
tinytex::reinstall_tinytex(repository = "illinois")
imc <- (peso/altura)^2
peso <- c(60, 72, 57, 90, 95, 72)
altura <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
plot(altura, peso)
imc <- (peso/altura)^2
plot(altura, peso)
getwd() #Donde estamos trabajando ahora?
library(tidyverse)
?getwd()
?tidyverse
??tidyverse
?tidyverse
Variable <- 43
Variable = 43
Variable = 45
a <- 10
b <- 3
suma <- 10 + 3
suma <- b + a
suma
print(suma)
division <- 10/3
perro <- b + a
log(perro)
#Operadores de Comparacion
< #Mayor Que
a = b
#Operadores de Comparacion
< #Mayor Que
a == b
a <- 10
b <- 3
#Operadores de Comparacion
< #Mayor Que
a == b
a != b
#Operadores de Comparacion
< #Mayor Que
x <- 5
y <- 10
resultado <- x > y
print(resultado)
#Operador Logico
x | y #Operador Logico OR (O)
x & y #Operador Logico AND (Y)
(10 + 2) * 5
x <- (10 + 2) * 5
x <- c(8,9,10,12,14,10,13,10,9)
x <- NA
# Funciones
x <- 1:20 #Creamos un Objeto
x
#Funciones de Informacion
summary(x) #resumen
mode(x) #El tipo de objeto
length(x) #La Longitud del objeto
median(x) #mediana
numeric_vector <- c(1.5, 2.3, 4.0)
entero_vector <- c(1L, 2L, 3L)
logico_vector <- c(TRUE, FALSE, TRUE)
caracteres_vector <- c("uno", "dos", "tres")
mode(entero_vector)
mode(caracteres_vector)
mode(logico_vector)
peso <- c(60, 72, 57, 90, 95, 72)
altura <- c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
plot(altura, peso)
imc <- (peso/altura)^2
plot(peso,imc)
## Matriz
X <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
X
a
X <- matrix(c(10, 10, 10, 10, 10, 10), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
rownames(X) #nombre de filas
colnames(X) #nombre de columnas
nrow(X) #Numero de filas
ncol(X) #numero de columnas
source("~/Documents/GitHub/Intro_R_2023/Intro_aR_2023_Trabajo.R", echo=TRUE)
t(X) #trasponer
X
X <- matrix(c(10, 10, 10, 10, 10, 10), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
#Manipulacion de Matrices
C.4 <- c(100, 1000) #crear vector para 4ta columna
X1 <- cbind(X, C.4) #Agregar 4ta columna a X
View(X1)
X
## Matriz
X <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
X
## Matriz
X1 <- matrix(c(1, 2, 3, 11, 12, 13), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
X2 <- matrix(c(10, 10, 10, 10, 10, 10), nrow=2, ncol=3, byrow=TRUE,
dimnames=list(c("fila1", "fila2"), c("C.1", "C.2", "C.3")))
X1 * X2
setwd("/Users/lio/Git/Intro_R_2023")
records <- read.csv("Datos/records.csv")
unique(recodrs$compiledRelease.buyer.name)
recordsS <- records %>%
select(
"compiledRelease.tender.mainProcurementCategory",
"compiledRelease.tender.procurementMethodDetails",
"compiledRelease.tender.procuringEntity.name",
"compiledRelease.buyer.name",
"compiledRelease.planning.budget.description",
"compiledRelease.planning.budget.amount.currency",
"compiledRelease.planning.budget.amount.amount",
"compiledRelease.tender.coveredBy") %>%
filter(!is.na(compiledRelease.planning.budget.amount.amount))
#Cambiar Nombre
# Cambiar nombres de las columnas
records2 <- recordsS %>%
rename(
Tipo = compiledRelease.tender.mainProcurementCategory,
Modo_Contratacion = compiledRelease.tender.procurementMethodDetails,
Entidad_Pedido = compiledRelease.tender.procuringEntity.name,
Entidad_Compradora = compiledRelease.buyer.name,
Descripcion = compiledRelease.planning.budget.description,
Divisa = compiledRelease.planning.budget.amount.currency,
Cantidad = compiledRelease.planning.budget.amount.amount,
Fondos = compiledRelease.tender.coveredBy
) %>%
mutate(Cantidad_PYG = ifelse(Divisa == "PYG", Cantidad, Cantidad * 7350)) %>%
mutate(Cantidad_USD = ifelse(Divisa == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(Fondos == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(grepl("fonacide", Fondos, ignore.case = TRUE), TRUE, FALSE))
library(stringdist)
library(proxy)
Des <- records2$Descripcion
#Cambiar Nombre
# Cambiar nombres de las columnas
records2 <- recordsS %>%
rename(
Tipo = compiledRelease.tender.mainProcurementCategory,
Modo_Contratacion = compiledRelease.tender.procurementMethodDetails,
Entidad_Pedido = compiledRelease.tender.procuringEntity.name,
Entidad_Compradora = compiledRelease.buyer.name,
Descripcion = compiledRelease.planning.budget.description,
Divisa = compiledRelease.planning.budget.amount.currency,
Cantidad = compiledRelease.planning.budget.amount.amount,
Fondos = compiledRelease.tender.coveredBy
) %>%
mutate(Cantidad_PYG = ifelse(Divisa == "PYG", Cantidad, Cantidad * 7350)) %>%
mutate(Cantidad_USD = ifelse(Divisa == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(Fondos == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(grepl("fonacide", Fondos, ignore.case = TRUE), TRUE, FALSE))
library(tidyverse)
setwd("/Users/lio/Git/Intro_R_2023")
records <- read.csv("Datos/records.csv")
unique(recodrs$compiledRelease.buyer.name)
recordsS <- records %>%
select(
"compiledRelease.tender.mainProcurementCategory",
"compiledRelease.tender.procurementMethodDetails",
"compiledRelease.tender.procuringEntity.name",
"compiledRelease.buyer.name",
"compiledRelease.planning.budget.description",
"compiledRelease.planning.budget.amount.currency",
"compiledRelease.planning.budget.amount.amount",
"compiledRelease.tender.coveredBy") %>%
filter(!is.na(compiledRelease.planning.budget.amount.amount))
#Cambiar Nombre
# Cambiar nombres de las columnas
records2 <- recordsS %>%
rename(
Tipo = compiledRelease.tender.mainProcurementCategory,
Modo_Contratacion = compiledRelease.tender.procurementMethodDetails,
Entidad_Pedido = compiledRelease.tender.procuringEntity.name,
Entidad_Compradora = compiledRelease.buyer.name,
Descripcion = compiledRelease.planning.budget.description,
Divisa = compiledRelease.planning.budget.amount.currency,
Cantidad = compiledRelease.planning.budget.amount.amount,
Fondos = compiledRelease.tender.coveredBy
) %>%
mutate(Cantidad_PYG = ifelse(Divisa == "PYG", Cantidad, Cantidad * 7350)) %>%
mutate(Cantidad_USD = ifelse(Divisa == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(Fondos == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(grepl("fonacide", Fondos, ignore.case = TRUE), TRUE, FALSE))
library(stringdist)
library(proxy)
Des <- records2$Descripcion
dist_matrix <- stringdist::stringdistmatrix(Des, method = "jaccard")
umbral <- 0.5  # Puedes ajustar este umbral según tus necesidades
similares <- which(dist_matrix < umbral, arr.ind = TRUE)
distances <- 1 - dist_matrix
# Perform hierarchical clustering
hc <- hclust(as.dist(distances), method = "complete")
View(hc)
# Cut the dendrogram to get clusters
cutree_result <- cutree(hc, k = 2)  # You can adjust the number of clusters (k)
# Attach cluster labels to your data
clustered_data <- data.frame(Des, cluster = cutree_result)
View(clustered_data)
umbral <- 0.9  # Puedes ajustar este umbral según tus necesidades
similares <- which(dist_matrix < umbral, arr.ind = TRUE)
distances <- 1 - dist_matrix
# Perform hierarchical clustering
hc <- hclust(as.dist(distances), method = "complete")
# Cut the dendrogram to get clusters
cutree_result <- cutree(hc, k = 2)  # You can adjust the number of clusters (k)
# Attach cluster labels to your data
clustered_data <- data.frame(Des, cluster = cutree_result)
View(clustered_data)
# Cut the dendrogram to get clusters
cutree_result <- cutree(hc, k = 10)  # You can adjust the number of clusters (k)
# Attach cluster labels to your data
clustered_data <- data.frame(Des, cluster = cutree_result)
View(clustered_data)
# Cut the dendrogram to get clusters
cutree_result <- cutree(hc, k = 10)  # You can adjust the number of clusters (k)
# Attach cluster labels to your data
clustered_data <- data.frame(Des, cluster = cutree_result)
View(clustered_data)
# Scatter plot of the clusters
plot(records2$Descripcion, col = cutree_result, pch = 19, main = "Clustered Data", xlab = "Descriptions", ylab = "Cluster")
# Scatter plot of the clusters
plot(clustered_data, col = cutree_result, pch = 19, main = "Clustered Data", xlab = "Descriptions", ylab = "Cluster")
# Scatter plot of the clusters
plot(clustered_data,
col = cutree_result,
pch = 19, main = "Clustered Data",
xlab = "Descriptions", ylab = "Cluster")
?plot
# Scatter plot of the clusters
plot(clustered_data$cluster,
col = cutree_result,
pch = 19, main = "Clustered Data",
xlab = "Descriptions", ylab = "Cluster")
# Eliminar las palabras especificadas de la columna "texto"
for (palabra in palabras_a_eliminar) {
Des <- gsub(palabra, "", Des, ignore.case = TRUE)
}
# Palabras a eliminar
palabras_a_eliminar <- c("
ADQUISICIÓN DE ", "
ADQUISICION DE",)
# Palabras a eliminar
palabras_a_eliminar <- c("
ADQUISICIÓN DE ", "
ADQUISICION DE")
# Eliminar las palabras especificadas de la columna "texto"
for (palabra in palabras_a_eliminar) {
Des <- gsub(palabra, "", Des, ignore.case = TRUE)
}
print(Des)
# Palabras a eliminar
palabras_a_eliminar <- c("
ADQUISICIÓN DE ", "
ADQUISICION DE")
# Eliminar las palabras especificadas de la columna "texto"
for (palabra in palabras_a_eliminar) {
Des <- gsub(palabra, "", Des, ignore.case = TRUE)
}
Des <- gsub("ADQUISICIÓN DE ", "", Des, ignore.case = TRUE)
Des
Des <- gsub("ADQUISICION DE ", "", Des, ignore.case = TRUE)
Des
dist_matrix <- stringdist::stringdistmatrix(Des, method = "jaccard")
umbral <- 0.5  # Puedes ajustar este umbral según tus necesidades
similares <- which(dist_matrix < umbral, arr.ind = TRUE)
distances <- 1 - dist_matrix
# Perform hierarchical clustering
hc <- hclust(as.dist(distances), method = "complete")
# Cut the dendrogram to get clusters
cutree_result <- cutree(hc, k = 10)  # You can adjust the number of clusters (k)
# Attach cluster labels to your data
clustered_data <- data.frame(Des, cluster = cutree_result)
View(clustered_data)
# Instalar y cargar la librería pROC si no está instalada
# install.packages("pROC")
library(pROC)
install.packages("pROC")
score = runif(100)
# Crear el objeto ROC
roc_obj <- roc(clustered_data$Des,clustered_data$cluster)
# Instalar y cargar la librería pROC si no está instalada
# install.packages("pROC")
library(pROC)
# Crear el objeto ROC
roc_obj <- roc(clustered_data$Des,clustered_data$cluster)
# Dibujar la curva ROC
plot(roc_obj, main = "Curva ROC", col = "blue", lwd = 2)
setwd("~/Documents/GitHub/Intro_R_2023")
setwd("~/Documents/GitHub/Intro_R_2023")
/Users/lio/Git/Intro_R_2023
setwd(/Users/lio/Git/Intro_R_2023)
setwd(Users/lio/Git/Intro_R_2023)
setwd(~/Users/lio/Git/Intro_R_2023)
setwd("~/Users/lio/Git/Intro_R_2023")
setwd("/Users/lio/Git/Intro_R_2023")
# Crear gráfico de barras
ggplot(Municipios_Itapua, aes(x = Entidad_Compradora, y = Cantidad_Total / 1000, fill = Fonacide)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Cantidad Total en Milles de USD por Entidad Compradora",
x = "Entidad Compradora",
y = "Cantidad Total (Miles de USD)") +
scale_y_continuous(labels = scales::comma) +  # Mostrar etiquetas en formato de miles
theme_minimal()
library(tidyverse)
# Crear gráfico de barras
ggplot(Municipios_Itapua, aes(x = Entidad_Compradora, y = Cantidad_Total / 1000, fill = Fonacide)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Cantidad Total en Milles de USD por Entidad Compradora",
x = "Entidad Compradora",
y = "Cantidad Total (Miles de USD)") +
scale_y_continuous(labels = scales::comma) +  # Mostrar etiquetas en formato de miles
theme_minimal()
records <- read.csv("Datos/records.csv")
unique(recodrs$compiledRelease.buyer.name)
recordsS <- records %>%
select(
"compiledRelease.tender.mainProcurementCategory",
"compiledRelease.tender.procurementMethodDetails",
"compiledRelease.tender.procuringEntity.name",
"compiledRelease.buyer.name",
"compiledRelease.planning.budget.description",
"compiledRelease.planning.budget.amount.currency",
"compiledRelease.planning.budget.amount.amount",
"compiledRelease.tender.coveredBy") %>%
filter(!is.na(compiledRelease.planning.budget.amount.amount))
#Cambiar Nombre
# Cambiar nombres de las columnas
records2 <- recordsS %>%
rename(
Tipo = compiledRelease.tender.mainProcurementCategory,
Modo_Contratacion = compiledRelease.tender.procurementMethodDetails,
Entidad_Pedido = compiledRelease.tender.procuringEntity.name,
Entidad_Compradora = compiledRelease.buyer.name,
Descripcion = compiledRelease.planning.budget.description,
Divisa = compiledRelease.planning.budget.amount.currency,
Cantidad = compiledRelease.planning.budget.amount.amount,
Fondos = compiledRelease.tender.coveredBy
) %>%
mutate(Cantidad_PYG = ifelse(Divisa == "PYG", Cantidad, Cantidad * 7350)) %>%
mutate(Cantidad_USD = ifelse(Divisa == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(Fondos == "USD", Cantidad, Cantidad / 7350)) %>%
mutate(Fonacide = ifelse(grepl("fonacide", Fondos, ignore.case = TRUE), TRUE, FALSE))
#Ver datos de Hoheanu
Hoheanu <- records2 %>%
filter(Entidad_Compradora == "Municipalidad de Hohenau") %>%
summarize(Cantidad_Total = sum(Cantidad_USD, na.rm = TRUE))
# Summarize and add amounts for each category
Comprador <- records2 %>%
group_by(Entidad_Compradora) %>%
summarize(Cantidad_Total = sum(Cantidad_USD, na.rm = TRUE))
# Select ros where the "categoria" column contains "municiplaidad de"
Municipios <- records2 %>%
filter(grepl("Municipalidad", Entidad_Compradora, ignore.case = TRUE))  %>%
group_by(Entidad_Compradora) %>%
summarize(Cantidad_Total = sum(Cantidad_USD, na.rm = TRUE))
# Seleccionar los 10 primeros municipios
top_10_municipios <- Municipios %>%
top_n(10, wt = Cantidad_Total)
# Select rows where the "categoria" column contains "municiplaidad de"
Municipios_F <- records2 %>%
filter(grepl("Municipalidad", Entidad_Compradora, ignore.case = TRUE))  %>%
group_by(Entidad_Compradora,Fonacide) %>%
summarize(Cantidad_Total = sum(Cantidad_USD, na.rm = TRUE)) %>%
mutate(Porcentaje = Cantidad_Total / sum(Cantidad_Total) * 100)
# Select rows where the "categoria" column contains "municiplaidad de"
Fonacide <- Municipios_F %>%
group_by(Fonacide) %>%
summarize(Cantidad_Total = sum(Cantidad_Total, na.rm = TRUE))
# Supongamos que tienes un dataframe llamado df
Municipios_Itapua <- Municipios_F %>%
filter(Entidad_Compradora %in% c("Municipalidad de Pirapó",
"Municipalidad de Fram",
"Municipalidad de Obligado",
"Municipalidad de Carmen del Paraná",
"Municipalidad de la Paz",
"Municipalidad de Cárlos Antonio López",
"Municipalidad de Hohenau"))
# Crear gráfico de barras
ggplot(Municipios_Itapua, aes(x = Entidad_Compradora, y = Cantidad_Total / 1000, fill = Fonacide)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Cantidad Total en Milles de USD por Entidad Compradora",
x = "Entidad Compradora",
y = "Cantidad Total (Miles de USD)") +
scale_y_continuous(labels = scales::comma) +  # Mostrar etiquetas en formato de miles
theme_minimal()
# Crear una paleta de colores
colores <- rainbow(length(unique(resultados$Departamento)))
npm install bootswatch
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
install.packages("bslib")
bslib::bs_theme_preview()
getwd()
View(hc)
View(clustered_data)
# Scatter plot of the clusters
plot(clustered_data$cluster,
col = cutree_result,
pch = 19, main = "Clustered Data",
xlab = "Descriptions", ylab = "Cluster")
